#include <Eigen/Dense>
#include <Eigen/SVD>
//~ #include <mlpack/core.hpp>
//~ #include <mlpack/methods/pca/pca.hpp>
//~ #include <mlpack/methods/gmm/gmm.hpp>
//~ #include <mlpack/methods/kmeans/refined_start.hpp>
//#include <mlpack/methods/kmeans/kmeans.hpp>
#include <limits>
#include <vector>
#include <cmath>
#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string>

//~ #include <kdl_parser/kdl_parser.hpp>
//~ #include <kdl/chain.hpp>
//~ #include <kdl/chainfksolver.hpp>
//~ #include <kdl/chainfksolverpos_recursive.hpp>
//~ #include <kdl/frames_io.hpp>
#include <pluginlib/class_loader.h>
#include "sensor_msgs/JointState.h"

// MoveIt!
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/robot_model/robot_model.h>
#include <moveit/robot_state/robot_state.h>
#include <moveit_msgs/DisplayTrajectory.h>

// Robot state publishing
#include <moveit/robot_state/conversions.h>
#include <moveit_msgs/DisplayRobotState.h>

// Kinematics
#include <moveit_msgs/GetPositionIK.h>

// execution
#include <moveit_msgs/RobotTrajectory.h>
#include <moveit_msgs/ExecuteKnownTrajectory.h>
//~ #include <moveit/planning_interface/planning_interface.h>
#include <moveit/move_group_interface/move_group.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit_msgs/RobotState.h>



class traj_data {
	private: 
		std::vector< std::vector<double> > traj_left;
		std::vector< std::vector<double> > traj_right;
		std::vector< std::vector<double> > traj_both;
		
		robot_model::RobotModelPtr kinematic_model;
		robot_state::RobotStatePtr kinematic_state;
		const robot_state::JointModelGroup* robot_arm_group;
		std::string robot_group_name;

	public:
		traj_data(robot_model::RobotModelPtr, std::string);
		void trajCallback(const moveit_msgs::DisplayTrajectoryConstPtr& );

		std::vector< std::vector<double> > * getTrajectoryL();
		std::vector< std::vector<double> > * getTrajectoryR();
		std::vector< std::vector<double> > * getTrajectoryBoth();
		void  setTrajectoryL(std::vector< std::vector<double> > traj);
		void  setTrajectoryR(std::vector< std::vector<double> > traj);
		void  setTrajectoryBoth(std::vector< std::vector<double> > traj);
		
		//~ robot_state::RobotStatePtr * getRobotState();
};
